package net.acperience.cloudplayer;

import java.io.IOException;
import java.io.PrintWriter;

import javax.security.auth.login.LoginException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServletAuth extends HttpServlet{
	
	private static final String AUTH_ATTRIBUTE = "CloudMusicAuth";
	private static final String AUTH_BASE = "/WEB-INF/conf/";
	private static final String LOGIN_CONF = AUTH_BASE + "jaas.conf";
	private static final String KRB5_CONF = AUTH_BASE + "krb5.conf";
	
	public ServletAuth(){
		// ...
	}

	/**
	 * Generated by Eclipse
	 */
	private static final long serialVersionUID = -2920347430404215837L;

	/** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs`
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
    	PrintWriter out = response.getWriter();
	    try{	
	    	// IMPORTANT - Check we are on HTTPS
	    	if (!request.isSecure()){
	    		response.sendRedirect("https://" + request.getServerName()+ ":" + Integer.toString(MusicUtility.SECURE_PORT) + "/auth");
	    		return;
	    	}
	    	
	    	// Let's check if there's a ?logout request
	    	if (request.getParameter("logout") != null)
	    		createMusicKerberos(request, this).logout();
	    	
	    	if (isUserAuthenticated(request)){
	    		response.sendRedirect("/");
	    	}
	    } catch (LoginException e) {
			e.printStackTrace(out);
		} catch (SecurityException e) {
			e.printStackTrace(out);
		}
	    finally{
	    	// Output Login
    		String output = MusicUtility.outputPage(this, "Login", MusicUtility.TPL_DIR + "login.tpl");
    		response.setContentType("text/html;charset=UTF-8");
    		out.print(output);
	    	out.close();
	    }
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
    	PrintWriter out = response.getWriter();
	    try{	
	    	// IMPORTANT - Check we are on HTTPS
	    	if (!request.isSecure()){
	    		response.sendRedirect("https://" + request.getServerName()+ ":" + Integer.toString(MusicUtility.SECURE_PORT) + "/auth");
	    		return;
	    	}
	    	if (isUserAuthenticated(request)){
	    		response.sendRedirect("/");
	    		return;
	    	}
	    	else{
	    		// Attempt to login
	    		MusicKerberos userAuth = createMusicKerberos(request, this);
	    		// Do Login
	    		userAuth.login();
	    		// Check that user is authenticated again
	    		if (isUserAuthenticated(request)){
	    			response.sendRedirect("/");
	    		}
	    	}
	    } catch (LoginException e) {
			e.printStackTrace(out);
		} catch (SecurityException e) {
			e.printStackTrace(out);
		}
	    finally{
	    	// Output Login
    		String output = MusicUtility.outputPage(this, "Login", MusicUtility.TPL_DIR + "login.tpl");
    		response.setContentType("text/html;charset=UTF-8");
    		out.print(output);
	    	out.close();
	    }
    }
    
    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo(){
        return "Short description";
    }

    
    /**
     * Check if a user has been authenticated before
     * @throws SecurityException 
     * @throws LoginException 
     */
    
    public boolean isUserAuthenticated(HttpServletRequest request) throws LoginException, SecurityException{
    	// Check if user has an authenticated session
    	MusicKerberos obj = createMusicKerberos(request, this);
    	return obj.isAuthenticated();
    }
    /**
     * Creates a MusicKeberos object to get authenticated user data based on the HttpRequest
     * 
     * @param request Request to contain the necessary user context information
     * @param context The HttpServlet calling the method
     * @return The object
     * @throws LoginException
     * @throws SecurityException
     */
    public static MusicKerberos createMusicKerberos(HttpServletRequest request, HttpServlet context)
    	throws LoginException, SecurityException {
    	// We will store a cache of the object for each HTTP Request
    	Object cache = request.getAttribute(AUTH_ATTRIBUTE);
    	if (cache != null){
    		if (cache instanceof MusicKerberos)
    			return (MusicKerberos) cache;
    	}
    	MusicKerberos obj = new MusicKerberos(AUTH_ATTRIBUTE,
    			context.getServletContext().getRealPath(LOGIN_CONF),
    			context.getServletContext().getRealPath(KRB5_CONF),
    			request);
    	// Attempt to authenticate and populate
    	obj.authenticate(false);
    	
    	request.setAttribute(AUTH_ATTRIBUTE, obj);
    	return obj;
    }
}
